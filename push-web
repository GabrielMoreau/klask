#!/bin/bash
#
# Copyright (C) 2005-2020 Gabriel Moreau <Gabriel.Moreau(A)univ-grenoble-alpes.fr>
# License GNU GPL version 2 or later
#
# 2007/10/23 Gabriel Moreau
# 2010/11/03 Gabriel Moreau
# 2011/03/30 Gabriel Moreau - make it generic
# 2017/11/04 Gabriel Moreau - all reworks - use tab

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
export LANG=C

SITE_NAME=''
REMOTE_SERVER=localhost
REMOTE_USER=''
REMOTE_FOLDER=/var/www/klask/

GRAPH_MODULO=9
GRAPH_SHIFT=1

if [ -f /etc/klask/push-web.conf ]
then
   . /etc/klask/push-web.conf
fi

TMP='/tmp/klask-push-web'


# remote command
DOT=/usr/bin/dot


mkdir -p ${TMP}
if [ ! -d ${TMP} ]
then
   echo "Error: Folder ${TMP} do not exist !"
   exit 1
fi
cd ${TMP}


LOCALTIME=$(date "+%Y-%m-%d %H:%M")
TIMEFILE=$(date "+%Y-%m-%d.%H-%M")

CACHE_TIMEOUT=50
find ${TMP}/ -type f -a -mtime +${CACHE_TIMEOUT} -delete

klask exportsw --format dot --modulo ${GRAPH_MODULO} --shift ${GRAPH_SHIFT} > ${TMP}/switch-map.txt.new
klask exportsw                                                              > ${TMP}/switch-db.txt.new

klask exportdb    > ${TMP}/hostname-db.txt
klask ip-free     > ${TMP}/ipfree-db.txt
klask bad-vlan-id > ${TMP}/badvlan-db.txt

cmp --silent ${TMP}/switch-db.txt.new ${TMP}/switch-db.txt || {
   mv -f ${TMP}/switch-db.txt.new ${TMP}/switch-db.${TIMEFILE}.txt;
   ln -sf ${TMP}/switch-db.${TIMEFILE}.txt ${TMP}/switch-db.txt
   }

cmp --silent ${TMP}/switch-map.txt.new ${TMP}/switch-map.txt || {
   mv -f ${TMP}/switch-map.txt.new ${TMP}/switch-map.${TIMEFILE}.txt;
   ln -sf ${TMP}/switch-map.${TIMEFILE}.txt ${TMP}/switch-map.txt
   }

old_switch_db=$((echo 'command <tt>klask exportsw --format txt</tt>';
      (cd ${TMP}/; ls -1 switch-db.20[[0-9]][[0-9]]-[[0-9]][[0-9]]-[[0-9]][[0-9]].[[0-9]][[0-9]]-[[0-9]][[0-9]].txt;) \
      | sed -e 's/^switch-db\.//; s/\.txt$//;' \
      | xargs -r -I {} printf "<a href=\"switch-db.%s.txt\">%s</a>\n" '{}' '{}' \
      ) \
   | paste -sd ',' -)

old_switch_map=$((echo 'graphviz';\
      (cd ${TMP}/; ls -1 switch-map.20[[0-9]][[0-9]]-[[0-9]][[0-9]]-[[0-9]][[0-9]].[[0-9]][[0-9]]-[[0-9]][[0-9]].txt;) \
      | sed -e 's/^switch-map\.//; s/\.txt$//;' \
      | xargs -r -I {} printf "<a href=\"switch-map.%s.txt\">%s</a>\n" '{}' '{}' \
      )\
   | paste -sd ',' -)

cat <<END > ${TMP}/index.html
<!DOCTYPE html>
<html lang="en">
<head>
 <link rel="stylesheet" type="text/css" href="style-klask.css" />
 <!-- <meta http-equiv="refresh" content="1800"> -->
 <title>Klask mapping net-tools</title>
 <noscript>
 </noscript>
 <script src="sorttable-klask.js"></script>
 <script src="svg-pan-zoom-klask.js"></script>
 <script>
function delayedRefresh() {
 setTimeout( "refresh()", 1800*1000 );
 }

function refresh() {
 history.go(0);
 }
 
function selectTab(event, tabName) {
 var i;
 var x = document.getElementsByClassName("selectableTabContent");
 var tablinks = document.getElementsByClassName("selectableTabButton");
 for (i = 0; i < x.length; i++) {
  x[i].style.display = "none";
  }
 for (i = 0; i < x.length; i++) {
  tablinks[i].id = "";
  }
 document.getElementById(tabName).style.display = "block";
 event.currentTarget.id = "selected";
 }

// https://stackoverflow.com/questions/17591447/how-to-reload-current-page-without-losing-any-form-data
// http://www.uitrick.com/javascript/how-to-keep-a-global-variable-alive-even-after-page-refresh-javascript/
// https://blog.udemy.com/javascript-page-refresh/

// localStorage.setItem('bgcolor', document.getElementById('bgcolor').value);
// localStorage.getItem('bgcolor');

// https://stackoverflow.com/questions/5683087/chaining-getelementbyid
function getById(id, context) {
 var el = document.getElementById(id);
 return context.contains(el) ? el : null;
 }
function getByName(name, context) {
 var i;
 var x = document.getElementsByName(name);
 for (i = 0; i < x.length; i++) {
  if ((x[i].getAttribute('name') == name) && (context.contains(x[i]))) {
   return x[i];
   }
  }
 return null;
 }

// Run on page load
window.onload = function() {
 if (typeof(Storage) !== "undefined") {
  // Code for localStorage/sessionStorage.
  var tabName = localStorage.getItem('navbar-selected');
  if (tabName == "undefined") { return; }
  var navbar = document.getElementById('navbar');
  var tab = getByName(tabName, navbar);
  var i;
  var x = document.getElementsByClassName("selectableTabContent");
  var tablinks = document.getElementsByClassName("selectableTabButton");

  for (i = 0; i < x.length; i++) {
   x[i].style.display = "none";
   }
  for (i = 0; i < x.length; i++) {
   tablinks[i].id = "";
   }

  document.getElementById(tabName).style.display = "block";
  tab.id = "selected";
  }
 else {
  // Sorry! No Web Storage support..
  }
 }

// Before refreshing the page, save the form data to sessionStorage
window.onbeforeunload = function() {
 if (typeof(Storage) !== "undefined") {
  // Code for localStorage/sessionStorage.
  // var navbar = document.getElementById('navbar');
  var selected = document.getElementById('selected'); // getById('selected', navbar);

  var tabName = selected.getAttribute('name');
  localStorage.setItem('navbar-selected', tabName);
  }
 else {
  // Sorry! No Web Storage support..
  }
 }
 </script>
</head>
<body> <!-- onload="delayedRefresh" -->
<h1>
<b><a href="http://servforge.legi.grenoble-inp.fr/projects/klask" class="circle">Klask</a></b>
Tool for <a href="switch-map.png">mapping</a> the local network - site ${SITE_NAME}
<a class="refresh" href="./">${LOCALTIME}</a>
</h1>

<div id="navbar">
 <ul>
  <li class="selectableTabButton" name="IP_detected"   onclick="selectTab(event, 'IP_detected')" id="selected">IP detected</li>
  <li class="selectableTabButton" name="IP_available"  onclick="selectTab(event, 'IP_available')">IP available</li>
  <li class="selectableTabButton" name="VLAN_mismatch" onclick="selectTab(event, 'VLAN_mismatch')">VLAN mismatch</li>
  <li class="selectableTabButton" name="MAP"           onclick="selectTab(event, 'MAP')">MAP (png)</li>
  <li class="selectableTabButton" name="RAW_data"      onclick="selectTab(event, 'RAW_data')">RAW data</li>
 </ul>
</div>

<div id="content">

 <div id="IP_detected" class="selectableTabContent">
  <p>
  List of all IP addresses detected on the local network (on all VLANs)
  since the origin of the database
  (except those that have been deleted manually and voluntarily).
  </p>
END

klask exportdb --format html >> ${TMP}/index.html

cat <<END >> ${TMP}/index.html
 </div>

 <div id="IP_available" class="selectableTabContent" style="display:none">
  <p>
  List all free IP addresses (which have never been used or not used for two years).
  These IP addresses are available to assign to all new computers.
  </p>
END

klask ip-free --format html >> ${TMP}/index.html

cat <<END >> ${TMP}/index.html
 </div>

 <div id="VLAN_mismatch" class="selectableTabContent" style="display:none">
  <p>
  List all computers connected to switches where the VLAN is misconfigured.
  Returns the port and VLAN to configure on these switches.
  </p>
END

klask bad-vlan-id --format html >> ${TMP}/index.html

cat <<END >> ${TMP}/index.html
 </div>

 <div id="MAP" class="selectableTabContent" style="display:none">
   <p>
   Direct link to local network map in the formats <a href="switch-map.png">png</a> and <a href="switch-map.svg">svg</a>.
   Because the map could be big,
   you will have a better web experience with
   <a href="https://addons.mozilla.org/en-US/firefox/addon/image-zoom/">Image Zoom<a> plugin (or equivalent) installed.
   </p>
   
   <embed type="image/svg+xml" src="switch-map.svg" id="my-embed-switch-map"/>
   <script>
      document.getElementById('my-embed-switch-map').addEventListener('load', function(){
         // Will get called after embed element was loaded
         svgPanZoom(document.getElementById('my-embed-switch-map')); 
         })
   </script>
   <img class="map" src="switch-map.png">
 </div>

 <div id="RAW_data" class="selectableTabContent" style="display:none">
  <p>
   The main raw results of Klask are accessible directly,
   via <tt>wget</tt> or <tt>curl</tt> tools for example,
   for any specific treatment:
   <ul>
    <li><a href="hostname-db.txt">Computers DB</a> (command <tt>klask exportdb --format txt</tt>),</li>
    <li><a href="switch-db.txt">Switches DB</a> (${old_switch_db}),</li>
    <li><a href="ipfree-db.txt">IP available</a> (command <tt>klask ip-free --format txt</tt>),</li>
    <li><a href="badvlan-db.txt">VLAN mismatch</a> (command <tt>klask bad-vlan-id --format txt</tt>),</li>
    <li>Map format: <a href="switch-map.txt">dot source</a> (${old_switch_map}), <a href="switch-map.png">png</a>, <a href="switch-map.svg">svg</a>.</li>
   </ul>
  </p>
 </div>
</div>

<p class="copyright">
Klask (version $(klask version | grep ^Version | cut -f 2 -d ' ')) - $(klask version | grep ^Copyright | cut -f 1 -d '<')
</p>
<!-- Try to prefect switch map image -->
<link rel="prefetch" href="switch-map.png">
</body>
</html>
END

if [ "${REMOTE_SERVER}" = "localhost" ]
then
   rsync --times \
      /usr/share/klask/sorttable-klask.js \
      /usr/share/klask/svg-pan-zoom-klask.js \
      /usr/share/klask/style-klask.css \
      ${TMP}/index.html \
      ${TMP}/*-db.txt \
      ${TMP}/switch-map.txt \
      ${TMP}/*.20[[0-9]][[0-9]]-[[0-9]][[0-9]]-[[0-9]][[0-9]].[[0-9]][[0-9]]-[[0-9]][[0-9]].txt \
      ${REMOTE_FOLDER}/

   [ -x ${DOT} ] && (cd ${REMOTE_FOLDER};
      [ switch-map.txt -nt switch-map.svg ] && ${DOT} -T svg switch-map.txt > switch-map.svg;
      [ switch-map.txt -nt switch-map.png ] && ${DOT} -T png switch-map.txt > switch-map.png)

else
   rsync --times \
      /usr/share/klask/sorttable-klask.js \
      /usr/share/klask/svg-pan-zoom-klask.js \
      /usr/share/klask/style-klask.css \
      ${TMP}/index.html \
      ${TMP}/*-db.txt \
      ${TMP}/switch-map.txt \
      ${TMP}/*.20[[0-9]][[0-9]]-[[0-9]][[0-9]]-[[0-9]][[0-9]].[[0-9]][[0-9]]-[[0-9]][[0-9]].txt \
      ${REMOTE_USER}@${REMOTE_SERVER}:${REMOTE_FOLDER}/


   ssh ${REMOTE_USER}@${REMOTE_SERVER} "(cd ${REMOTE_FOLDER};
      [ switch-map.txt -nt switch-map.svg ] && ${DOT} -T svg switch-map.txt > switch-map.svg;
      [ switch-map.txt -nt switch-map.png ] && ${DOT} -T png switch-map.txt > switch-map.png)"
fi
